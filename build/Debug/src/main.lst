                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _sendSensorData
                                     13 	.globl _getChecksum
                                     14 	.globl _ADS1115ToVoltage
                                     15 	.globl _ADS1115Read
                                     16 	.globl _ADS1115Init
                                     17 	.globl _SerialWrite
                                     18 	.globl _SerialBegin
                                     19 	.globl ___memcpy
                                     20 	.globl _CP_RL2
                                     21 	.globl _C_T2
                                     22 	.globl _TR2
                                     23 	.globl _EXEN2
                                     24 	.globl _TCLK
                                     25 	.globl _RCLK
                                     26 	.globl _EXF2
                                     27 	.globl _TF2
                                     28 	.globl _T2
                                     29 	.globl _T2EX
                                     30 	.globl _RI
                                     31 	.globl _TI
                                     32 	.globl _RB8
                                     33 	.globl _TB8
                                     34 	.globl _REN
                                     35 	.globl _SM2
                                     36 	.globl _SM1
                                     37 	.globl _SM0
                                     38 	.globl _RXD
                                     39 	.globl _TXD
                                     40 	.globl _INT0
                                     41 	.globl _INT1
                                     42 	.globl _T0
                                     43 	.globl _T1
                                     44 	.globl _WR
                                     45 	.globl _RD
                                     46 	.globl _PX0
                                     47 	.globl _PT0
                                     48 	.globl _PX1
                                     49 	.globl _PT1
                                     50 	.globl _PS
                                     51 	.globl _PT2
                                     52 	.globl _EX0
                                     53 	.globl _ET0
                                     54 	.globl _EX1
                                     55 	.globl _ET1
                                     56 	.globl _ES
                                     57 	.globl _ET2
                                     58 	.globl _EA
                                     59 	.globl _IT0
                                     60 	.globl _IE0
                                     61 	.globl _IT1
                                     62 	.globl _IE1
                                     63 	.globl _TR0
                                     64 	.globl _TF0
                                     65 	.globl _TR1
                                     66 	.globl _TF1
                                     67 	.globl _P
                                     68 	.globl _OV
                                     69 	.globl _RS0
                                     70 	.globl _RS1
                                     71 	.globl _F0
                                     72 	.globl _AC
                                     73 	.globl _CY
                                     74 	.globl _P37
                                     75 	.globl _P36
                                     76 	.globl _P35
                                     77 	.globl _P34
                                     78 	.globl _P33
                                     79 	.globl _P32
                                     80 	.globl _P31
                                     81 	.globl _P30
                                     82 	.globl _P27
                                     83 	.globl _P26
                                     84 	.globl _P25
                                     85 	.globl _P24
                                     86 	.globl _P23
                                     87 	.globl _P22
                                     88 	.globl _P21
                                     89 	.globl _P20
                                     90 	.globl _P17
                                     91 	.globl _P16
                                     92 	.globl _P15
                                     93 	.globl _P14
                                     94 	.globl _P13
                                     95 	.globl _P12
                                     96 	.globl _P11
                                     97 	.globl _P10
                                     98 	.globl _P07
                                     99 	.globl _P06
                                    100 	.globl _P05
                                    101 	.globl _P04
                                    102 	.globl _P03
                                    103 	.globl _P02
                                    104 	.globl _P01
                                    105 	.globl _P00
                                    106 	.globl _TH2
                                    107 	.globl _TL2
                                    108 	.globl _RCAP2H
                                    109 	.globl _RCAP2L
                                    110 	.globl _T2CON
                                    111 	.globl _SBUF
                                    112 	.globl _SCON
                                    113 	.globl _IP
                                    114 	.globl _IE
                                    115 	.globl _TH1
                                    116 	.globl _TH0
                                    117 	.globl _TL1
                                    118 	.globl _TL0
                                    119 	.globl _TMOD
                                    120 	.globl _TCON
                                    121 	.globl _PCON
                                    122 	.globl _DPH
                                    123 	.globl _DPL
                                    124 	.globl _SP
                                    125 	.globl _B
                                    126 	.globl _ACC
                                    127 	.globl _PSW
                                    128 	.globl _P3
                                    129 	.globl _P2
                                    130 	.globl _P1
                                    131 	.globl _P0
                                    132 ;--------------------------------------------------------
                                    133 ; special function registers
                                    134 ;--------------------------------------------------------
                                    135 	.area RSEG    (ABS,DATA)
      000000                        136 	.org 0x0000
                           000080   137 G$P0$0_0$0 == 0x0080
                           000080   138 _P0	=	0x0080
                           000090   139 G$P1$0_0$0 == 0x0090
                           000090   140 _P1	=	0x0090
                           0000A0   141 G$P2$0_0$0 == 0x00a0
                           0000A0   142 _P2	=	0x00a0
                           0000B0   143 G$P3$0_0$0 == 0x00b0
                           0000B0   144 _P3	=	0x00b0
                           0000D0   145 G$PSW$0_0$0 == 0x00d0
                           0000D0   146 _PSW	=	0x00d0
                           0000E0   147 G$ACC$0_0$0 == 0x00e0
                           0000E0   148 _ACC	=	0x00e0
                           0000F0   149 G$B$0_0$0 == 0x00f0
                           0000F0   150 _B	=	0x00f0
                           000081   151 G$SP$0_0$0 == 0x0081
                           000081   152 _SP	=	0x0081
                           000082   153 G$DPL$0_0$0 == 0x0082
                           000082   154 _DPL	=	0x0082
                           000083   155 G$DPH$0_0$0 == 0x0083
                           000083   156 _DPH	=	0x0083
                           000087   157 G$PCON$0_0$0 == 0x0087
                           000087   158 _PCON	=	0x0087
                           000088   159 G$TCON$0_0$0 == 0x0088
                           000088   160 _TCON	=	0x0088
                           000089   161 G$TMOD$0_0$0 == 0x0089
                           000089   162 _TMOD	=	0x0089
                           00008A   163 G$TL0$0_0$0 == 0x008a
                           00008A   164 _TL0	=	0x008a
                           00008B   165 G$TL1$0_0$0 == 0x008b
                           00008B   166 _TL1	=	0x008b
                           00008C   167 G$TH0$0_0$0 == 0x008c
                           00008C   168 _TH0	=	0x008c
                           00008D   169 G$TH1$0_0$0 == 0x008d
                           00008D   170 _TH1	=	0x008d
                           0000A8   171 G$IE$0_0$0 == 0x00a8
                           0000A8   172 _IE	=	0x00a8
                           0000B8   173 G$IP$0_0$0 == 0x00b8
                           0000B8   174 _IP	=	0x00b8
                           000098   175 G$SCON$0_0$0 == 0x0098
                           000098   176 _SCON	=	0x0098
                           000099   177 G$SBUF$0_0$0 == 0x0099
                           000099   178 _SBUF	=	0x0099
                           0000C8   179 G$T2CON$0_0$0 == 0x00c8
                           0000C8   180 _T2CON	=	0x00c8
                           0000CA   181 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   182 _RCAP2L	=	0x00ca
                           0000CB   183 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   184 _RCAP2H	=	0x00cb
                           0000CC   185 G$TL2$0_0$0 == 0x00cc
                           0000CC   186 _TL2	=	0x00cc
                           0000CD   187 G$TH2$0_0$0 == 0x00cd
                           0000CD   188 _TH2	=	0x00cd
                                    189 ;--------------------------------------------------------
                                    190 ; special function bits
                                    191 ;--------------------------------------------------------
                                    192 	.area RSEG    (ABS,DATA)
      000000                        193 	.org 0x0000
                           000080   194 G$P00$0_0$0 == 0x0080
                           000080   195 _P00	=	0x0080
                           000081   196 G$P01$0_0$0 == 0x0081
                           000081   197 _P01	=	0x0081
                           000082   198 G$P02$0_0$0 == 0x0082
                           000082   199 _P02	=	0x0082
                           000083   200 G$P03$0_0$0 == 0x0083
                           000083   201 _P03	=	0x0083
                           000084   202 G$P04$0_0$0 == 0x0084
                           000084   203 _P04	=	0x0084
                           000085   204 G$P05$0_0$0 == 0x0085
                           000085   205 _P05	=	0x0085
                           000086   206 G$P06$0_0$0 == 0x0086
                           000086   207 _P06	=	0x0086
                           000087   208 G$P07$0_0$0 == 0x0087
                           000087   209 _P07	=	0x0087
                           000090   210 G$P10$0_0$0 == 0x0090
                           000090   211 _P10	=	0x0090
                           000091   212 G$P11$0_0$0 == 0x0091
                           000091   213 _P11	=	0x0091
                           000092   214 G$P12$0_0$0 == 0x0092
                           000092   215 _P12	=	0x0092
                           000093   216 G$P13$0_0$0 == 0x0093
                           000093   217 _P13	=	0x0093
                           000094   218 G$P14$0_0$0 == 0x0094
                           000094   219 _P14	=	0x0094
                           000095   220 G$P15$0_0$0 == 0x0095
                           000095   221 _P15	=	0x0095
                           000096   222 G$P16$0_0$0 == 0x0096
                           000096   223 _P16	=	0x0096
                           000097   224 G$P17$0_0$0 == 0x0097
                           000097   225 _P17	=	0x0097
                           0000A0   226 G$P20$0_0$0 == 0x00a0
                           0000A0   227 _P20	=	0x00a0
                           0000A1   228 G$P21$0_0$0 == 0x00a1
                           0000A1   229 _P21	=	0x00a1
                           0000A2   230 G$P22$0_0$0 == 0x00a2
                           0000A2   231 _P22	=	0x00a2
                           0000A3   232 G$P23$0_0$0 == 0x00a3
                           0000A3   233 _P23	=	0x00a3
                           0000A4   234 G$P24$0_0$0 == 0x00a4
                           0000A4   235 _P24	=	0x00a4
                           0000A5   236 G$P25$0_0$0 == 0x00a5
                           0000A5   237 _P25	=	0x00a5
                           0000A6   238 G$P26$0_0$0 == 0x00a6
                           0000A6   239 _P26	=	0x00a6
                           0000A7   240 G$P27$0_0$0 == 0x00a7
                           0000A7   241 _P27	=	0x00a7
                           0000B0   242 G$P30$0_0$0 == 0x00b0
                           0000B0   243 _P30	=	0x00b0
                           0000B1   244 G$P31$0_0$0 == 0x00b1
                           0000B1   245 _P31	=	0x00b1
                           0000B2   246 G$P32$0_0$0 == 0x00b2
                           0000B2   247 _P32	=	0x00b2
                           0000B3   248 G$P33$0_0$0 == 0x00b3
                           0000B3   249 _P33	=	0x00b3
                           0000B4   250 G$P34$0_0$0 == 0x00b4
                           0000B4   251 _P34	=	0x00b4
                           0000B5   252 G$P35$0_0$0 == 0x00b5
                           0000B5   253 _P35	=	0x00b5
                           0000B6   254 G$P36$0_0$0 == 0x00b6
                           0000B6   255 _P36	=	0x00b6
                           0000B7   256 G$P37$0_0$0 == 0x00b7
                           0000B7   257 _P37	=	0x00b7
                           0000D7   258 G$CY$0_0$0 == 0x00d7
                           0000D7   259 _CY	=	0x00d7
                           0000D6   260 G$AC$0_0$0 == 0x00d6
                           0000D6   261 _AC	=	0x00d6
                           0000D5   262 G$F0$0_0$0 == 0x00d5
                           0000D5   263 _F0	=	0x00d5
                           0000D4   264 G$RS1$0_0$0 == 0x00d4
                           0000D4   265 _RS1	=	0x00d4
                           0000D3   266 G$RS0$0_0$0 == 0x00d3
                           0000D3   267 _RS0	=	0x00d3
                           0000D2   268 G$OV$0_0$0 == 0x00d2
                           0000D2   269 _OV	=	0x00d2
                           0000D0   270 G$P$0_0$0 == 0x00d0
                           0000D0   271 _P	=	0x00d0
                           00008F   272 G$TF1$0_0$0 == 0x008f
                           00008F   273 _TF1	=	0x008f
                           00008E   274 G$TR1$0_0$0 == 0x008e
                           00008E   275 _TR1	=	0x008e
                           00008D   276 G$TF0$0_0$0 == 0x008d
                           00008D   277 _TF0	=	0x008d
                           00008C   278 G$TR0$0_0$0 == 0x008c
                           00008C   279 _TR0	=	0x008c
                           00008B   280 G$IE1$0_0$0 == 0x008b
                           00008B   281 _IE1	=	0x008b
                           00008A   282 G$IT1$0_0$0 == 0x008a
                           00008A   283 _IT1	=	0x008a
                           000089   284 G$IE0$0_0$0 == 0x0089
                           000089   285 _IE0	=	0x0089
                           000088   286 G$IT0$0_0$0 == 0x0088
                           000088   287 _IT0	=	0x0088
                           0000AF   288 G$EA$0_0$0 == 0x00af
                           0000AF   289 _EA	=	0x00af
                           0000AD   290 G$ET2$0_0$0 == 0x00ad
                           0000AD   291 _ET2	=	0x00ad
                           0000AC   292 G$ES$0_0$0 == 0x00ac
                           0000AC   293 _ES	=	0x00ac
                           0000AB   294 G$ET1$0_0$0 == 0x00ab
                           0000AB   295 _ET1	=	0x00ab
                           0000AA   296 G$EX1$0_0$0 == 0x00aa
                           0000AA   297 _EX1	=	0x00aa
                           0000A9   298 G$ET0$0_0$0 == 0x00a9
                           0000A9   299 _ET0	=	0x00a9
                           0000A8   300 G$EX0$0_0$0 == 0x00a8
                           0000A8   301 _EX0	=	0x00a8
                           0000BD   302 G$PT2$0_0$0 == 0x00bd
                           0000BD   303 _PT2	=	0x00bd
                           0000BC   304 G$PS$0_0$0 == 0x00bc
                           0000BC   305 _PS	=	0x00bc
                           0000BB   306 G$PT1$0_0$0 == 0x00bb
                           0000BB   307 _PT1	=	0x00bb
                           0000BA   308 G$PX1$0_0$0 == 0x00ba
                           0000BA   309 _PX1	=	0x00ba
                           0000B9   310 G$PT0$0_0$0 == 0x00b9
                           0000B9   311 _PT0	=	0x00b9
                           0000B8   312 G$PX0$0_0$0 == 0x00b8
                           0000B8   313 _PX0	=	0x00b8
                           0000B7   314 G$RD$0_0$0 == 0x00b7
                           0000B7   315 _RD	=	0x00b7
                           0000B6   316 G$WR$0_0$0 == 0x00b6
                           0000B6   317 _WR	=	0x00b6
                           0000B5   318 G$T1$0_0$0 == 0x00b5
                           0000B5   319 _T1	=	0x00b5
                           0000B4   320 G$T0$0_0$0 == 0x00b4
                           0000B4   321 _T0	=	0x00b4
                           0000B3   322 G$INT1$0_0$0 == 0x00b3
                           0000B3   323 _INT1	=	0x00b3
                           0000B2   324 G$INT0$0_0$0 == 0x00b2
                           0000B2   325 _INT0	=	0x00b2
                           0000B1   326 G$TXD$0_0$0 == 0x00b1
                           0000B1   327 _TXD	=	0x00b1
                           0000B0   328 G$RXD$0_0$0 == 0x00b0
                           0000B0   329 _RXD	=	0x00b0
                           00009F   330 G$SM0$0_0$0 == 0x009f
                           00009F   331 _SM0	=	0x009f
                           00009E   332 G$SM1$0_0$0 == 0x009e
                           00009E   333 _SM1	=	0x009e
                           00009D   334 G$SM2$0_0$0 == 0x009d
                           00009D   335 _SM2	=	0x009d
                           00009C   336 G$REN$0_0$0 == 0x009c
                           00009C   337 _REN	=	0x009c
                           00009B   338 G$TB8$0_0$0 == 0x009b
                           00009B   339 _TB8	=	0x009b
                           00009A   340 G$RB8$0_0$0 == 0x009a
                           00009A   341 _RB8	=	0x009a
                           000099   342 G$TI$0_0$0 == 0x0099
                           000099   343 _TI	=	0x0099
                           000098   344 G$RI$0_0$0 == 0x0098
                           000098   345 _RI	=	0x0098
                           000091   346 G$T2EX$0_0$0 == 0x0091
                           000091   347 _T2EX	=	0x0091
                           000090   348 G$T2$0_0$0 == 0x0090
                           000090   349 _T2	=	0x0090
                           0000CF   350 G$TF2$0_0$0 == 0x00cf
                           0000CF   351 _TF2	=	0x00cf
                           0000CE   352 G$EXF2$0_0$0 == 0x00ce
                           0000CE   353 _EXF2	=	0x00ce
                           0000CD   354 G$RCLK$0_0$0 == 0x00cd
                           0000CD   355 _RCLK	=	0x00cd
                           0000CC   356 G$TCLK$0_0$0 == 0x00cc
                           0000CC   357 _TCLK	=	0x00cc
                           0000CB   358 G$EXEN2$0_0$0 == 0x00cb
                           0000CB   359 _EXEN2	=	0x00cb
                           0000CA   360 G$TR2$0_0$0 == 0x00ca
                           0000CA   361 _TR2	=	0x00ca
                           0000C9   362 G$C_T2$0_0$0 == 0x00c9
                           0000C9   363 _C_T2	=	0x00c9
                           0000C8   364 G$CP_RL2$0_0$0 == 0x00c8
                           0000C8   365 _CP_RL2	=	0x00c8
                                    366 ;--------------------------------------------------------
                                    367 ; overlayable register banks
                                    368 ;--------------------------------------------------------
                                    369 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        370 	.ds 8
                                    371 ;--------------------------------------------------------
                                    372 ; internal ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area DSEG    (DATA)
                           000000   375 Lmain.sendSensorData$dataBytes$1_0$53==.
      000000                        376 _sendSensorData_dataBytes_65536_53:
      000000                        377 	.ds 17
                           000011   378 Lmain.main$dat$1_0$56==.
      000011                        379 _main_dat_65536_56:
      000011                        380 	.ds 17
                           000022   381 Lmain.main$f$1_1$57==.
      000022                        382 _main_f_65537_57:
      000022                        383 	.ds 4
                                    384 ;--------------------------------------------------------
                                    385 ; overlayable items in internal ram 
                                    386 ;--------------------------------------------------------
                                    387 	.area	OSEG    (OVR,DATA)
                           000000   388 Lmain.getChecksum$dat$1_0$46==.
      000000                        389 _getChecksum_dat_65536_46:
      000000                        390 	.ds 3
                           000003   391 Lmain.getChecksum$bytes$3_0$49==.
      000003                        392 _getChecksum_bytes_196608_49:
      000003                        393 	.ds 3
                                    394 ;--------------------------------------------------------
                                    395 ; Stack segment in internal ram 
                                    396 ;--------------------------------------------------------
                                    397 	.area	SSEG
      000000                        398 __start__stack:
      000000                        399 	.ds	1
                                    400 
                                    401 ;--------------------------------------------------------
                                    402 ; indirectly addressable internal ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area ISEG    (DATA)
                                    405 ;--------------------------------------------------------
                                    406 ; absolute internal ram data
                                    407 ;--------------------------------------------------------
                                    408 	.area IABS    (ABS,DATA)
                                    409 	.area IABS    (ABS,DATA)
                                    410 ;--------------------------------------------------------
                                    411 ; bit data
                                    412 ;--------------------------------------------------------
                                    413 	.area BSEG    (BIT)
                                    414 ;--------------------------------------------------------
                                    415 ; paged external ram data
                                    416 ;--------------------------------------------------------
                                    417 	.area PSEG    (PAG,XDATA)
                                    418 ;--------------------------------------------------------
                                    419 ; external ram data
                                    420 ;--------------------------------------------------------
                                    421 	.area XSEG    (XDATA)
                                    422 ;--------------------------------------------------------
                                    423 ; absolute external ram data
                                    424 ;--------------------------------------------------------
                                    425 	.area XABS    (ABS,XDATA)
                                    426 ;--------------------------------------------------------
                                    427 ; external initialized ram data
                                    428 ;--------------------------------------------------------
                                    429 	.area XISEG   (XDATA)
                                    430 	.area HOME    (CODE)
                                    431 	.area GSINIT0 (CODE)
                                    432 	.area GSINIT1 (CODE)
                                    433 	.area GSINIT2 (CODE)
                                    434 	.area GSINIT3 (CODE)
                                    435 	.area GSINIT4 (CODE)
                                    436 	.area GSINIT5 (CODE)
                                    437 	.area GSINIT  (CODE)
                                    438 	.area GSFINAL (CODE)
                                    439 	.area CSEG    (CODE)
                                    440 ;--------------------------------------------------------
                                    441 ; interrupt vector 
                                    442 ;--------------------------------------------------------
                                    443 	.area HOME    (CODE)
      000000                        444 __interrupt_vect:
      000000 02r00r00         [24]  445 	ljmp	__sdcc_gsinit_startup
                                    446 ;--------------------------------------------------------
                                    447 ; global & static initialisations
                                    448 ;--------------------------------------------------------
                                    449 	.area HOME    (CODE)
                                    450 	.area GSINIT  (CODE)
                                    451 	.area GSFINAL (CODE)
                                    452 	.area GSINIT  (CODE)
                                    453 	.globl __sdcc_gsinit_startup
                                    454 	.globl __sdcc_program_startup
                                    455 	.globl __start__stack
                                    456 	.globl __mcs51_genXINIT
                                    457 	.globl __mcs51_genXRAMCLEAR
                                    458 	.globl __mcs51_genRAMCLEAR
                                    459 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  460 	ljmp	__sdcc_program_startup
                                    461 ;--------------------------------------------------------
                                    462 ; Home
                                    463 ;--------------------------------------------------------
                                    464 	.area HOME    (CODE)
                                    465 	.area HOME    (CODE)
      000003                        466 __sdcc_program_startup:
      000003 02r00r82         [24]  467 	ljmp	_main
                                    468 ;	return from main will return to caller
                                    469 ;--------------------------------------------------------
                                    470 ; code
                                    471 ;--------------------------------------------------------
                                    472 	.area CSEG    (CODE)
                                    473 ;------------------------------------------------------------
                                    474 ;Allocation info for local variables in function 'getChecksum'
                                    475 ;------------------------------------------------------------
                                    476 ;dat                       Allocated with name '_getChecksum_dat_65536_46'
                                    477 ;checksum                  Allocated to registers r4 
                                    478 ;i                         Allocated to registers r3 
                                    479 ;bytes                     Allocated with name '_getChecksum_bytes_196608_49'
                                    480 ;j                         Allocated to registers r7 
                                    481 ;------------------------------------------------------------
                           000000   482 	G$getChecksum$0$0 ==.
                           000000   483 	C$main.c$28$0_0$47 ==.
                                    484 ;	./src/main.c:28: uint8_t getChecksum(float* dat) {
                                    485 ;	-----------------------------------------
                                    486 ;	 function getChecksum
                                    487 ;	-----------------------------------------
      000000                        488 _getChecksum:
                           000007   489 	ar7 = 0x07
                           000006   490 	ar6 = 0x06
                           000005   491 	ar5 = 0x05
                           000004   492 	ar4 = 0x04
                           000003   493 	ar3 = 0x03
                           000002   494 	ar2 = 0x02
                           000001   495 	ar1 = 0x01
                           000000   496 	ar0 = 0x00
      000000 85 82*00         [24]  497 	mov	_getChecksum_dat_65536_46,dpl
      000003 85 83*01         [24]  498 	mov	(_getChecksum_dat_65536_46 + 1),dph
      000006 85 F0*02         [24]  499 	mov	(_getChecksum_dat_65536_46 + 2),b
                           000009   500 	C$main.c$29$2_0$47 ==.
                                    501 ;	./src/main.c:29: uint8_t checksum = 0;
      000009 7C 00            [12]  502 	mov	r4,#0x00
                           00000B   503 	C$main.c$31$1_0$47 ==.
                                    504 ;	./src/main.c:31: for (uint8_t i = 0; i < 4; i++) {
      00000B 7B 00            [12]  505 	mov	r3,#0x00
      00000D                        506 00107$:
      00000D BB 04 00         [24]  507 	cjne	r3,#0x04,00129$
      000010                        508 00129$:
      000010 50 3A            [24]  509 	jnc	00102$
                           000012   510 	C$main.c$32$3_0$49 ==.
                                    511 ;	./src/main.c:32: uint8_t* bytes = (uint8_t*)&dat[i];
      000012 EB               [12]  512 	mov	a,r3
      000013 75 F0 04         [24]  513 	mov	b,#0x04
      000016 A4               [48]  514 	mul	ab
      000017 25*00            [12]  515 	add	a,_getChecksum_dat_65536_46
      000019 F8               [12]  516 	mov	r0,a
      00001A E5*01            [12]  517 	mov	a,(_getChecksum_dat_65536_46 + 1)
      00001C 35 F0            [12]  518 	addc	a,b
      00001E F9               [12]  519 	mov	r1,a
      00001F AA*02            [24]  520 	mov	r2,(_getChecksum_dat_65536_46 + 2)
      000021 88*03            [24]  521 	mov	_getChecksum_bytes_196608_49,r0
      000023 75*04 00         [24]  522 	mov	(_getChecksum_bytes_196608_49 + 1),#0x00
      000026 75*05 40         [24]  523 	mov	(_getChecksum_bytes_196608_49 + 2),#0x40
                           000029   524 	C$main.c$34$1_0$47 ==.
                                    525 ;	./src/main.c:34: for (uint8_t j = 0; j < sizeof(float); j++) {
      000029 7F 00            [12]  526 	mov	r7,#0x00
      00002B                        527 00104$:
      00002B BF 04 00         [24]  528 	cjne	r7,#0x04,00131$
      00002E                        529 00131$:
      00002E 50 19            [24]  530 	jnc	00108$
                           000030   531 	C$main.c$35$5_0$51 ==.
                                    532 ;	./src/main.c:35: checksum ^= bytes[j];
      000030 EF               [12]  533 	mov	a,r7
      000031 25*03            [12]  534 	add	a,_getChecksum_bytes_196608_49
      000033 FA               [12]  535 	mov	r2,a
      000034 E4               [12]  536 	clr	a
      000035 35*04            [12]  537 	addc	a,(_getChecksum_bytes_196608_49 + 1)
      000037 FD               [12]  538 	mov	r5,a
      000038 AE*05            [24]  539 	mov	r6,(_getChecksum_bytes_196608_49 + 2)
      00003A 8A 82            [24]  540 	mov	dpl,r2
      00003C 8D 83            [24]  541 	mov	dph,r5
      00003E 8E F0            [24]  542 	mov	b,r6
      000040 12r00r00         [24]  543 	lcall	__gptrget
      000043 FA               [12]  544 	mov	r2,a
      000044 62 04            [12]  545 	xrl	ar4,a
                           000046   546 	C$main.c$34$4_0$50 ==.
                                    547 ;	./src/main.c:34: for (uint8_t j = 0; j < sizeof(float); j++) {
      000046 0F               [12]  548 	inc	r7
      000047 80 E2            [24]  549 	sjmp	00104$
      000049                        550 00108$:
                           000049   551 	C$main.c$31$2_0$48 ==.
                                    552 ;	./src/main.c:31: for (uint8_t i = 0; i < 4; i++) {
      000049 0B               [12]  553 	inc	r3
      00004A 80 C1            [24]  554 	sjmp	00107$
      00004C                        555 00102$:
                           00004C   556 	C$main.c$39$1_0$47 ==.
                                    557 ;	./src/main.c:39: return checksum;
      00004C 8C 82            [24]  558 	mov	dpl,r4
                           00004E   559 	C$main.c$40$1_0$47 ==.
                                    560 ;	./src/main.c:40: }
                           00004E   561 	C$main.c$40$1_0$47 ==.
                           00004E   562 	XG$getChecksum$0$0 ==.
      00004E 22               [24]  563 	ret
                                    564 ;------------------------------------------------------------
                                    565 ;Allocation info for local variables in function 'sendSensorData'
                                    566 ;------------------------------------------------------------
                                    567 ;dat                       Allocated to registers r5 r6 r7 
                                    568 ;dataBytes                 Allocated with name '_sendSensorData_dataBytes_65536_53'
                                    569 ;i                         Allocated to registers r7 
                                    570 ;------------------------------------------------------------
                           00004F   571 	G$sendSensorData$0$0 ==.
                           00004F   572 	C$main.c$43$1_0$53 ==.
                                    573 ;	./src/main.c:43: void sendSensorData(sensor_t* dat) {
                                    574 ;	-----------------------------------------
                                    575 ;	 function sendSensorData
                                    576 ;	-----------------------------------------
      00004F                        577 _sendSensorData:
      00004F AD 82            [24]  578 	mov	r5,dpl
      000051 AE 83            [24]  579 	mov	r6,dph
      000053 AF F0            [24]  580 	mov	r7,b
                           000055   581 	C$main.c$45$1_0$53 ==.
                                    582 ;	./src/main.c:45: memcpy(dataBytes, dat, sizeof(sensor_t));
      000055 8D*00            [24]  583 	mov	___memcpy_PARM_2,r5
      000057 8E*01            [24]  584 	mov	(___memcpy_PARM_2 + 1),r6
      000059 8F*02            [24]  585 	mov	(___memcpy_PARM_2 + 2),r7
      00005B 75*00 11         [24]  586 	mov	___memcpy_PARM_3,#0x11
      00005E 75*01 00         [24]  587 	mov	(___memcpy_PARM_3 + 1),#0x00
      000061 90r00r00         [24]  588 	mov	dptr,#_sendSensorData_dataBytes_65536_53
      000064 75 F0 40         [24]  589 	mov	b,#0x40
      000067 12r00r00         [24]  590 	lcall	___memcpy
                           00006A   591 	C$main.c$47$2_0$53 ==.
                                    592 ;	./src/main.c:47: for (uint8_t i = 0; i < sizeof(sensor_t); i++) {
      00006A 7F 00            [12]  593 	mov	r7,#0x00
      00006C                        594 00103$:
      00006C BF 11 00         [24]  595 	cjne	r7,#0x11,00116$
      00006F                        596 00116$:
      00006F 50 10            [24]  597 	jnc	00105$
                           000071   598 	C$main.c$48$3_0$55 ==.
                                    599 ;	./src/main.c:48: SerialWrite(dataBytes[i]);
      000071 EF               [12]  600 	mov	a,r7
      000072 24r00            [12]  601 	add	a,#_sendSensorData_dataBytes_65536_53
      000074 F9               [12]  602 	mov	r1,a
      000075 87 82            [24]  603 	mov	dpl,@r1
      000077 C0 07            [24]  604 	push	ar7
      000079 12r00r00         [24]  605 	lcall	_SerialWrite
      00007C D0 07            [24]  606 	pop	ar7
                           00007E   607 	C$main.c$47$2_0$54 ==.
                                    608 ;	./src/main.c:47: for (uint8_t i = 0; i < sizeof(sensor_t); i++) {
      00007E 0F               [12]  609 	inc	r7
      00007F 80 EB            [24]  610 	sjmp	00103$
      000081                        611 00105$:
                           000081   612 	C$main.c$50$2_0$53 ==.
                                    613 ;	./src/main.c:50: }
                           000081   614 	C$main.c$50$2_0$53 ==.
                           000081   615 	XG$sendSensorData$0$0 ==.
      000081 22               [24]  616 	ret
                                    617 ;------------------------------------------------------------
                                    618 ;Allocation info for local variables in function 'main'
                                    619 ;------------------------------------------------------------
                                    620 ;dat                       Allocated with name '_main_dat_65536_56'
                                    621 ;f                         Allocated with name '_main_f_65537_57'
                                    622 ;------------------------------------------------------------
                           000082   623 	G$main$0$0 ==.
                           000082   624 	C$main.c$52$2_0$56 ==.
                                    625 ;	./src/main.c:52: void main() {
                                    626 ;	-----------------------------------------
                                    627 ;	 function main
                                    628 ;	-----------------------------------------
      000082                        629 _main:
                           000082   630 	C$main.c$54$1_0$56 ==.
                                    631 ;	./src/main.c:54: SerialBegin(19200);
      000082 90 4B 00         [24]  632 	mov	dptr,#0x4b00
      000085 12r00r00         [24]  633 	lcall	_SerialBegin
                           000088   634 	C$main.c$56$1_0$56 ==.
                                    635 ;	./src/main.c:56: ADS1115Init();
      000088 12r00r00         [24]  636 	lcall	_ADS1115Init
                           00008B   637 	C$main.c$57$1_1$57 ==.
                                    638 ;	./src/main.c:57: float f = ADS1115ToVoltage(ADS1115_PGA_4_096V);
      00008B 90 02 00         [24]  639 	mov	dptr,#0x0200
      00008E 12r00r00         [24]  640 	lcall	_ADS1115ToVoltage
      000091 85 82*22         [24]  641 	mov	_main_f_65537_57,dpl
      000094 85 83*23         [24]  642 	mov	(_main_f_65537_57 + 1),dph
      000097 85 F0*24         [24]  643 	mov	(_main_f_65537_57 + 2),b
      00009A F5*25            [12]  644 	mov	(_main_f_65537_57 + 3),a
                           00009C   645 	C$main.c$59$1_1$57 ==.
                                    646 ;	./src/main.c:59: while (1) {
      00009C                        647 00102$:
                           00009C   648 	C$main.c$60$2_1$58 ==.
                                    649 ;	./src/main.c:60: dat.AIN[0] =
                           00009C   650 	C$main.c$64$2_1$58 ==.
                                    651 ;	./src/main.c:64: ADS1115_COMP_QUEUE_DISABLE);
      00009C 75*00 00         [24]  652 	mov	_ADS1115Read_PARM_2,#0x00
      00009F 75*01 02         [24]  653 	mov	(_ADS1115Read_PARM_2 + 1),#0x02
      0000A2 75*00 E0         [24]  654 	mov	_ADS1115Read_PARM_3,#0xe0
      0000A5 75*00 10         [24]  655 	mov	_ADS1115Read_PARM_4,#0x10
      0000A8 75*00 00         [24]  656 	mov	_ADS1115Read_PARM_5,#0x00
      0000AB 75*00 00         [24]  657 	mov	_ADS1115Read_PARM_6,#0x00
      0000AE 75*00 03         [24]  658 	mov	_ADS1115Read_PARM_7,#0x03
      0000B1 90 40 00         [24]  659 	mov	dptr,#0x4000
      0000B4 12r00r00         [24]  660 	lcall	_ADS1115Read
      0000B7 12r00r00         [24]  661 	lcall	___sint2fs
      0000BA AA 82            [24]  662 	mov	r2,dpl
      0000BC AB 83            [24]  663 	mov	r3,dph
      0000BE AE F0            [24]  664 	mov	r6,b
      0000C0 FF               [12]  665 	mov	r7,a
      0000C1 C0 02            [24]  666 	push	ar2
      0000C3 C0 03            [24]  667 	push	ar3
      0000C5 C0 06            [24]  668 	push	ar6
      0000C7 C0 07            [24]  669 	push	ar7
      0000C9 85*22 82         [24]  670 	mov	dpl,_main_f_65537_57
      0000CC 85*23 83         [24]  671 	mov	dph,(_main_f_65537_57 + 1)
      0000CF 85*24 F0         [24]  672 	mov	b,(_main_f_65537_57 + 2)
      0000D2 E5*25            [12]  673 	mov	a,(_main_f_65537_57 + 3)
      0000D4 12r00r00         [24]  674 	lcall	___fsmul
      0000D7 AC 82            [24]  675 	mov	r4,dpl
      0000D9 AD 83            [24]  676 	mov	r5,dph
      0000DB AE F0            [24]  677 	mov	r6,b
      0000DD FF               [12]  678 	mov	r7,a
      0000DE E5 81            [12]  679 	mov	a,sp
      0000E0 24 FC            [12]  680 	add	a,#0xfc
      0000E2 F5 81            [12]  681 	mov	sp,a
      0000E4 8C*11            [24]  682 	mov	(_main_dat_65536_56 + 0),r4
      0000E6 8D*12            [24]  683 	mov	(_main_dat_65536_56 + 1),r5
      0000E8 8E*13            [24]  684 	mov	(_main_dat_65536_56 + 2),r6
      0000EA 8F*14            [24]  685 	mov	(_main_dat_65536_56 + 3),r7
                           0000EC   686 	C$main.c$65$2_1$58 ==.
                                    687 ;	./src/main.c:65: dat.AIN[1] =
                           0000EC   688 	C$main.c$69$2_1$58 ==.
                                    689 ;	./src/main.c:69: ADS1115_COMP_QUEUE_DISABLE);
      0000EC 75*00 00         [24]  690 	mov	_ADS1115Read_PARM_2,#0x00
      0000EF 75*01 02         [24]  691 	mov	(_ADS1115Read_PARM_2 + 1),#0x02
      0000F2 75*00 E0         [24]  692 	mov	_ADS1115Read_PARM_3,#0xe0
      0000F5 75*00 10         [24]  693 	mov	_ADS1115Read_PARM_4,#0x10
      0000F8 75*00 00         [24]  694 	mov	_ADS1115Read_PARM_5,#0x00
      0000FB 75*00 00         [24]  695 	mov	_ADS1115Read_PARM_6,#0x00
      0000FE 75*00 03         [24]  696 	mov	_ADS1115Read_PARM_7,#0x03
      000101 90 50 00         [24]  697 	mov	dptr,#0x5000
      000104 12r00r00         [24]  698 	lcall	_ADS1115Read
      000107 12r00r00         [24]  699 	lcall	___sint2fs
      00010A AC 82            [24]  700 	mov	r4,dpl
      00010C AD 83            [24]  701 	mov	r5,dph
      00010E AE F0            [24]  702 	mov	r6,b
      000110 FF               [12]  703 	mov	r7,a
      000111 C0 04            [24]  704 	push	ar4
      000113 C0 05            [24]  705 	push	ar5
      000115 C0 06            [24]  706 	push	ar6
      000117 C0 07            [24]  707 	push	ar7
      000119 85*22 82         [24]  708 	mov	dpl,_main_f_65537_57
      00011C 85*23 83         [24]  709 	mov	dph,(_main_f_65537_57 + 1)
      00011F 85*24 F0         [24]  710 	mov	b,(_main_f_65537_57 + 2)
      000122 E5*25            [12]  711 	mov	a,(_main_f_65537_57 + 3)
      000124 12r00r00         [24]  712 	lcall	___fsmul
      000127 AC 82            [24]  713 	mov	r4,dpl
      000129 AD 83            [24]  714 	mov	r5,dph
      00012B AE F0            [24]  715 	mov	r6,b
      00012D FF               [12]  716 	mov	r7,a
      00012E E5 81            [12]  717 	mov	a,sp
      000130 24 FC            [12]  718 	add	a,#0xfc
      000132 F5 81            [12]  719 	mov	sp,a
      000134 8C*15            [24]  720 	mov	((_main_dat_65536_56 + 0x0004) + 0),r4
      000136 8D*16            [24]  721 	mov	((_main_dat_65536_56 + 0x0004) + 1),r5
      000138 8E*17            [24]  722 	mov	((_main_dat_65536_56 + 0x0004) + 2),r6
      00013A 8F*18            [24]  723 	mov	((_main_dat_65536_56 + 0x0004) + 3),r7
                           00013C   724 	C$main.c$70$2_1$58 ==.
                                    725 ;	./src/main.c:70: dat.AIN[2] =
                           00013C   726 	C$main.c$74$2_1$58 ==.
                                    727 ;	./src/main.c:74: ADS1115_COMP_QUEUE_DISABLE);
      00013C 75*00 00         [24]  728 	mov	_ADS1115Read_PARM_2,#0x00
      00013F 75*01 02         [24]  729 	mov	(_ADS1115Read_PARM_2 + 1),#0x02
      000142 75*00 E0         [24]  730 	mov	_ADS1115Read_PARM_3,#0xe0
      000145 75*00 10         [24]  731 	mov	_ADS1115Read_PARM_4,#0x10
      000148 75*00 00         [24]  732 	mov	_ADS1115Read_PARM_5,#0x00
      00014B 75*00 00         [24]  733 	mov	_ADS1115Read_PARM_6,#0x00
      00014E 75*00 03         [24]  734 	mov	_ADS1115Read_PARM_7,#0x03
      000151 90 60 00         [24]  735 	mov	dptr,#0x6000
      000154 12r00r00         [24]  736 	lcall	_ADS1115Read
      000157 12r00r00         [24]  737 	lcall	___sint2fs
      00015A AC 82            [24]  738 	mov	r4,dpl
      00015C AD 83            [24]  739 	mov	r5,dph
      00015E AE F0            [24]  740 	mov	r6,b
      000160 FF               [12]  741 	mov	r7,a
      000161 C0 04            [24]  742 	push	ar4
      000163 C0 05            [24]  743 	push	ar5
      000165 C0 06            [24]  744 	push	ar6
      000167 C0 07            [24]  745 	push	ar7
      000169 85*22 82         [24]  746 	mov	dpl,_main_f_65537_57
      00016C 85*23 83         [24]  747 	mov	dph,(_main_f_65537_57 + 1)
      00016F 85*24 F0         [24]  748 	mov	b,(_main_f_65537_57 + 2)
      000172 E5*25            [12]  749 	mov	a,(_main_f_65537_57 + 3)
      000174 12r00r00         [24]  750 	lcall	___fsmul
      000177 AC 82            [24]  751 	mov	r4,dpl
      000179 AD 83            [24]  752 	mov	r5,dph
      00017B AE F0            [24]  753 	mov	r6,b
      00017D FF               [12]  754 	mov	r7,a
      00017E E5 81            [12]  755 	mov	a,sp
      000180 24 FC            [12]  756 	add	a,#0xfc
      000182 F5 81            [12]  757 	mov	sp,a
      000184 8C*19            [24]  758 	mov	((_main_dat_65536_56 + 0x0008) + 0),r4
      000186 8D*1A            [24]  759 	mov	((_main_dat_65536_56 + 0x0008) + 1),r5
      000188 8E*1B            [24]  760 	mov	((_main_dat_65536_56 + 0x0008) + 2),r6
      00018A 8F*1C            [24]  761 	mov	((_main_dat_65536_56 + 0x0008) + 3),r7
                           00018C   762 	C$main.c$75$2_1$58 ==.
                                    763 ;	./src/main.c:75: dat.AIN[3] =
                           00018C   764 	C$main.c$79$2_1$58 ==.
                                    765 ;	./src/main.c:79: ADS1115_COMP_QUEUE_DISABLE);
      00018C 75*00 00         [24]  766 	mov	_ADS1115Read_PARM_2,#0x00
      00018F 75*01 02         [24]  767 	mov	(_ADS1115Read_PARM_2 + 1),#0x02
      000192 75*00 E0         [24]  768 	mov	_ADS1115Read_PARM_3,#0xe0
      000195 75*00 10         [24]  769 	mov	_ADS1115Read_PARM_4,#0x10
      000198 75*00 00         [24]  770 	mov	_ADS1115Read_PARM_5,#0x00
      00019B 75*00 00         [24]  771 	mov	_ADS1115Read_PARM_6,#0x00
      00019E 75*00 03         [24]  772 	mov	_ADS1115Read_PARM_7,#0x03
      0001A1 90 70 00         [24]  773 	mov	dptr,#0x7000
      0001A4 12r00r00         [24]  774 	lcall	_ADS1115Read
      0001A7 12r00r00         [24]  775 	lcall	___sint2fs
      0001AA AC 82            [24]  776 	mov	r4,dpl
      0001AC AD 83            [24]  777 	mov	r5,dph
      0001AE AE F0            [24]  778 	mov	r6,b
      0001B0 FF               [12]  779 	mov	r7,a
      0001B1 C0 04            [24]  780 	push	ar4
      0001B3 C0 05            [24]  781 	push	ar5
      0001B5 C0 06            [24]  782 	push	ar6
      0001B7 C0 07            [24]  783 	push	ar7
      0001B9 85*22 82         [24]  784 	mov	dpl,_main_f_65537_57
      0001BC 85*23 83         [24]  785 	mov	dph,(_main_f_65537_57 + 1)
      0001BF 85*24 F0         [24]  786 	mov	b,(_main_f_65537_57 + 2)
      0001C2 E5*25            [12]  787 	mov	a,(_main_f_65537_57 + 3)
      0001C4 12r00r00         [24]  788 	lcall	___fsmul
      0001C7 AC 82            [24]  789 	mov	r4,dpl
      0001C9 AD 83            [24]  790 	mov	r5,dph
      0001CB AE F0            [24]  791 	mov	r6,b
      0001CD FF               [12]  792 	mov	r7,a
      0001CE E5 81            [12]  793 	mov	a,sp
      0001D0 24 FC            [12]  794 	add	a,#0xfc
      0001D2 F5 81            [12]  795 	mov	sp,a
      0001D4 8C*1D            [24]  796 	mov	((_main_dat_65536_56 + 0x000c) + 0),r4
      0001D6 8D*1E            [24]  797 	mov	((_main_dat_65536_56 + 0x000c) + 1),r5
      0001D8 8E*1F            [24]  798 	mov	((_main_dat_65536_56 + 0x000c) + 2),r6
      0001DA 8F*20            [24]  799 	mov	((_main_dat_65536_56 + 0x000c) + 3),r7
                           0001DC   800 	C$main.c$80$2_1$58 ==.
                                    801 ;	./src/main.c:80: dat.Checksum = getChecksum(dat.AIN);
      0001DC 90r00r11         [24]  802 	mov	dptr,#_main_dat_65536_56
      0001DF 75 F0 40         [24]  803 	mov	b,#0x40
      0001E2 12r00r00         [24]  804 	lcall	_getChecksum
      0001E5 E5 82            [12]  805 	mov	a,dpl
      0001E7 F5*21            [12]  806 	mov	(_main_dat_65536_56 + 0x0010),a
                           0001E9   807 	C$main.c$82$2_1$58 ==.
                                    808 ;	./src/main.c:82: SerialWrite(SYNC_WORD);
      0001E9 75 82 8A         [24]  809 	mov	dpl,#0x8a
      0001EC 12r00r00         [24]  810 	lcall	_SerialWrite
                           0001EF   811 	C$main.c$83$2_1$58 ==.
                                    812 ;	./src/main.c:83: sendSensorData(&dat);
      0001EF 90r00r11         [24]  813 	mov	dptr,#_main_dat_65536_56
      0001F2 75 F0 40         [24]  814 	mov	b,#0x40
      0001F5 12r00r4F         [24]  815 	lcall	_sendSensorData
      0001F8 02r00r9C         [24]  816 	ljmp	00102$
                           0001FB   817 	C$main.c$85$1_1$56 ==.
                                    818 ;	./src/main.c:85: }
                           0001FB   819 	C$main.c$85$1_1$56 ==.
                           0001FB   820 	XG$main$0$0 ==.
      0001FB 22               [24]  821 	ret
                                    822 	.area CSEG    (CODE)
                                    823 	.area CONST   (CODE)
                                    824 	.area XINIT   (CODE)
                                    825 	.area CABS    (ABS,CODE)
