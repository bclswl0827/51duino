                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module ttl
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _PIN_P37
                                     12 	.globl _PIN_P36
                                     13 	.globl _PIN_P35
                                     14 	.globl _PIN_P34
                                     15 	.globl _PIN_P33
                                     16 	.globl _PIN_P32
                                     17 	.globl _PIN_P31
                                     18 	.globl _PIN_P30
                                     19 	.globl _PIN_P27
                                     20 	.globl _PIN_P26
                                     21 	.globl _PIN_P25
                                     22 	.globl _PIN_P24
                                     23 	.globl _PIN_P23
                                     24 	.globl _PIN_P22
                                     25 	.globl _PIN_P21
                                     26 	.globl _PIN_P20
                                     27 	.globl _PIN_P17
                                     28 	.globl _PIN_P16
                                     29 	.globl _PIN_P15
                                     30 	.globl _PIN_P14
                                     31 	.globl _PIN_P13
                                     32 	.globl _PIN_P12
                                     33 	.globl _PIN_P11
                                     34 	.globl _PIN_P10
                                     35 	.globl _PIN_P07
                                     36 	.globl _PIN_P06
                                     37 	.globl _PIN_P05
                                     38 	.globl _PIN_P04
                                     39 	.globl _PIN_P03
                                     40 	.globl _PIN_P02
                                     41 	.globl _PIN_P01
                                     42 	.globl _PIN_P00
                                     43 	.globl _putchar
                                     44 	.globl _SerialAvailable
                                     45 	.globl _SerialRead
                                     46 	.globl _SerialPrintln
                                     47 	.globl _SerialPrint
                                     48 	.globl _SerialWrite
                                     49 	.globl _SerialFlush
                                     50 	.globl _SerialSetTimeout
                                     51 	.globl _SerialEnd
                                     52 	.globl _SerialBegin
                                     53 	.globl _CP_RL2
                                     54 	.globl _C_T2
                                     55 	.globl _TR2
                                     56 	.globl _EXEN2
                                     57 	.globl _TCLK
                                     58 	.globl _RCLK
                                     59 	.globl _EXF2
                                     60 	.globl _TF2
                                     61 	.globl _T2
                                     62 	.globl _T2EX
                                     63 	.globl _RI
                                     64 	.globl _TI
                                     65 	.globl _RB8
                                     66 	.globl _TB8
                                     67 	.globl _REN
                                     68 	.globl _SM2
                                     69 	.globl _SM1
                                     70 	.globl _SM0
                                     71 	.globl _RXD
                                     72 	.globl _TXD
                                     73 	.globl _INT0
                                     74 	.globl _INT1
                                     75 	.globl _T0
                                     76 	.globl _T1
                                     77 	.globl _WR
                                     78 	.globl _RD
                                     79 	.globl _PX0
                                     80 	.globl _PT0
                                     81 	.globl _PX1
                                     82 	.globl _PT1
                                     83 	.globl _PS
                                     84 	.globl _PT2
                                     85 	.globl _EX0
                                     86 	.globl _ET0
                                     87 	.globl _EX1
                                     88 	.globl _ET1
                                     89 	.globl _ES
                                     90 	.globl _ET2
                                     91 	.globl _EA
                                     92 	.globl _IT0
                                     93 	.globl _IE0
                                     94 	.globl _IT1
                                     95 	.globl _IE1
                                     96 	.globl _TR0
                                     97 	.globl _TF0
                                     98 	.globl _TR1
                                     99 	.globl _TF1
                                    100 	.globl _P
                                    101 	.globl _OV
                                    102 	.globl _RS0
                                    103 	.globl _RS1
                                    104 	.globl _F0
                                    105 	.globl _AC
                                    106 	.globl _CY
                                    107 	.globl _P37
                                    108 	.globl _P36
                                    109 	.globl _P35
                                    110 	.globl _P34
                                    111 	.globl _P33
                                    112 	.globl _P32
                                    113 	.globl _P31
                                    114 	.globl _P30
                                    115 	.globl _P27
                                    116 	.globl _P26
                                    117 	.globl _P25
                                    118 	.globl _P24
                                    119 	.globl _P23
                                    120 	.globl _P22
                                    121 	.globl _P21
                                    122 	.globl _P20
                                    123 	.globl _P17
                                    124 	.globl _P16
                                    125 	.globl _P15
                                    126 	.globl _P14
                                    127 	.globl _P13
                                    128 	.globl _P12
                                    129 	.globl _P11
                                    130 	.globl _P10
                                    131 	.globl _P07
                                    132 	.globl _P06
                                    133 	.globl _P05
                                    134 	.globl _P04
                                    135 	.globl _P03
                                    136 	.globl _P02
                                    137 	.globl _P01
                                    138 	.globl _P00
                                    139 	.globl _TH2
                                    140 	.globl _TL2
                                    141 	.globl _RCAP2H
                                    142 	.globl _RCAP2L
                                    143 	.globl _T2CON
                                    144 	.globl _SBUF
                                    145 	.globl _SCON
                                    146 	.globl _IP
                                    147 	.globl _IE
                                    148 	.globl _TH1
                                    149 	.globl _TH0
                                    150 	.globl _TL1
                                    151 	.globl _TL0
                                    152 	.globl _TMOD
                                    153 	.globl _TCON
                                    154 	.globl _PCON
                                    155 	.globl _DPH
                                    156 	.globl _DPL
                                    157 	.globl _SP
                                    158 	.globl _B
                                    159 	.globl _ACC
                                    160 	.globl _PSW
                                    161 	.globl _P3
                                    162 	.globl _P2
                                    163 	.globl _P1
                                    164 	.globl _P0
                                    165 ;--------------------------------------------------------
                                    166 ; special function registers
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
                           000080   170 G$P0$0_0$0 == 0x0080
                           000080   171 _P0	=	0x0080
                           000090   172 G$P1$0_0$0 == 0x0090
                           000090   173 _P1	=	0x0090
                           0000A0   174 G$P2$0_0$0 == 0x00a0
                           0000A0   175 _P2	=	0x00a0
                           0000B0   176 G$P3$0_0$0 == 0x00b0
                           0000B0   177 _P3	=	0x00b0
                           0000D0   178 G$PSW$0_0$0 == 0x00d0
                           0000D0   179 _PSW	=	0x00d0
                           0000E0   180 G$ACC$0_0$0 == 0x00e0
                           0000E0   181 _ACC	=	0x00e0
                           0000F0   182 G$B$0_0$0 == 0x00f0
                           0000F0   183 _B	=	0x00f0
                           000081   184 G$SP$0_0$0 == 0x0081
                           000081   185 _SP	=	0x0081
                           000082   186 G$DPL$0_0$0 == 0x0082
                           000082   187 _DPL	=	0x0082
                           000083   188 G$DPH$0_0$0 == 0x0083
                           000083   189 _DPH	=	0x0083
                           000087   190 G$PCON$0_0$0 == 0x0087
                           000087   191 _PCON	=	0x0087
                           000088   192 G$TCON$0_0$0 == 0x0088
                           000088   193 _TCON	=	0x0088
                           000089   194 G$TMOD$0_0$0 == 0x0089
                           000089   195 _TMOD	=	0x0089
                           00008A   196 G$TL0$0_0$0 == 0x008a
                           00008A   197 _TL0	=	0x008a
                           00008B   198 G$TL1$0_0$0 == 0x008b
                           00008B   199 _TL1	=	0x008b
                           00008C   200 G$TH0$0_0$0 == 0x008c
                           00008C   201 _TH0	=	0x008c
                           00008D   202 G$TH1$0_0$0 == 0x008d
                           00008D   203 _TH1	=	0x008d
                           0000A8   204 G$IE$0_0$0 == 0x00a8
                           0000A8   205 _IE	=	0x00a8
                           0000B8   206 G$IP$0_0$0 == 0x00b8
                           0000B8   207 _IP	=	0x00b8
                           000098   208 G$SCON$0_0$0 == 0x0098
                           000098   209 _SCON	=	0x0098
                           000099   210 G$SBUF$0_0$0 == 0x0099
                           000099   211 _SBUF	=	0x0099
                           0000C8   212 G$T2CON$0_0$0 == 0x00c8
                           0000C8   213 _T2CON	=	0x00c8
                           0000CA   214 G$RCAP2L$0_0$0 == 0x00ca
                           0000CA   215 _RCAP2L	=	0x00ca
                           0000CB   216 G$RCAP2H$0_0$0 == 0x00cb
                           0000CB   217 _RCAP2H	=	0x00cb
                           0000CC   218 G$TL2$0_0$0 == 0x00cc
                           0000CC   219 _TL2	=	0x00cc
                           0000CD   220 G$TH2$0_0$0 == 0x00cd
                           0000CD   221 _TH2	=	0x00cd
                                    222 ;--------------------------------------------------------
                                    223 ; special function bits
                                    224 ;--------------------------------------------------------
                                    225 	.area RSEG    (ABS,DATA)
      000000                        226 	.org 0x0000
                           000080   227 G$P00$0_0$0 == 0x0080
                           000080   228 _P00	=	0x0080
                           000081   229 G$P01$0_0$0 == 0x0081
                           000081   230 _P01	=	0x0081
                           000082   231 G$P02$0_0$0 == 0x0082
                           000082   232 _P02	=	0x0082
                           000083   233 G$P03$0_0$0 == 0x0083
                           000083   234 _P03	=	0x0083
                           000084   235 G$P04$0_0$0 == 0x0084
                           000084   236 _P04	=	0x0084
                           000085   237 G$P05$0_0$0 == 0x0085
                           000085   238 _P05	=	0x0085
                           000086   239 G$P06$0_0$0 == 0x0086
                           000086   240 _P06	=	0x0086
                           000087   241 G$P07$0_0$0 == 0x0087
                           000087   242 _P07	=	0x0087
                           000090   243 G$P10$0_0$0 == 0x0090
                           000090   244 _P10	=	0x0090
                           000091   245 G$P11$0_0$0 == 0x0091
                           000091   246 _P11	=	0x0091
                           000092   247 G$P12$0_0$0 == 0x0092
                           000092   248 _P12	=	0x0092
                           000093   249 G$P13$0_0$0 == 0x0093
                           000093   250 _P13	=	0x0093
                           000094   251 G$P14$0_0$0 == 0x0094
                           000094   252 _P14	=	0x0094
                           000095   253 G$P15$0_0$0 == 0x0095
                           000095   254 _P15	=	0x0095
                           000096   255 G$P16$0_0$0 == 0x0096
                           000096   256 _P16	=	0x0096
                           000097   257 G$P17$0_0$0 == 0x0097
                           000097   258 _P17	=	0x0097
                           0000A0   259 G$P20$0_0$0 == 0x00a0
                           0000A0   260 _P20	=	0x00a0
                           0000A1   261 G$P21$0_0$0 == 0x00a1
                           0000A1   262 _P21	=	0x00a1
                           0000A2   263 G$P22$0_0$0 == 0x00a2
                           0000A2   264 _P22	=	0x00a2
                           0000A3   265 G$P23$0_0$0 == 0x00a3
                           0000A3   266 _P23	=	0x00a3
                           0000A4   267 G$P24$0_0$0 == 0x00a4
                           0000A4   268 _P24	=	0x00a4
                           0000A5   269 G$P25$0_0$0 == 0x00a5
                           0000A5   270 _P25	=	0x00a5
                           0000A6   271 G$P26$0_0$0 == 0x00a6
                           0000A6   272 _P26	=	0x00a6
                           0000A7   273 G$P27$0_0$0 == 0x00a7
                           0000A7   274 _P27	=	0x00a7
                           0000B0   275 G$P30$0_0$0 == 0x00b0
                           0000B0   276 _P30	=	0x00b0
                           0000B1   277 G$P31$0_0$0 == 0x00b1
                           0000B1   278 _P31	=	0x00b1
                           0000B2   279 G$P32$0_0$0 == 0x00b2
                           0000B2   280 _P32	=	0x00b2
                           0000B3   281 G$P33$0_0$0 == 0x00b3
                           0000B3   282 _P33	=	0x00b3
                           0000B4   283 G$P34$0_0$0 == 0x00b4
                           0000B4   284 _P34	=	0x00b4
                           0000B5   285 G$P35$0_0$0 == 0x00b5
                           0000B5   286 _P35	=	0x00b5
                           0000B6   287 G$P36$0_0$0 == 0x00b6
                           0000B6   288 _P36	=	0x00b6
                           0000B7   289 G$P37$0_0$0 == 0x00b7
                           0000B7   290 _P37	=	0x00b7
                           0000D7   291 G$CY$0_0$0 == 0x00d7
                           0000D7   292 _CY	=	0x00d7
                           0000D6   293 G$AC$0_0$0 == 0x00d6
                           0000D6   294 _AC	=	0x00d6
                           0000D5   295 G$F0$0_0$0 == 0x00d5
                           0000D5   296 _F0	=	0x00d5
                           0000D4   297 G$RS1$0_0$0 == 0x00d4
                           0000D4   298 _RS1	=	0x00d4
                           0000D3   299 G$RS0$0_0$0 == 0x00d3
                           0000D3   300 _RS0	=	0x00d3
                           0000D2   301 G$OV$0_0$0 == 0x00d2
                           0000D2   302 _OV	=	0x00d2
                           0000D0   303 G$P$0_0$0 == 0x00d0
                           0000D0   304 _P	=	0x00d0
                           00008F   305 G$TF1$0_0$0 == 0x008f
                           00008F   306 _TF1	=	0x008f
                           00008E   307 G$TR1$0_0$0 == 0x008e
                           00008E   308 _TR1	=	0x008e
                           00008D   309 G$TF0$0_0$0 == 0x008d
                           00008D   310 _TF0	=	0x008d
                           00008C   311 G$TR0$0_0$0 == 0x008c
                           00008C   312 _TR0	=	0x008c
                           00008B   313 G$IE1$0_0$0 == 0x008b
                           00008B   314 _IE1	=	0x008b
                           00008A   315 G$IT1$0_0$0 == 0x008a
                           00008A   316 _IT1	=	0x008a
                           000089   317 G$IE0$0_0$0 == 0x0089
                           000089   318 _IE0	=	0x0089
                           000088   319 G$IT0$0_0$0 == 0x0088
                           000088   320 _IT0	=	0x0088
                           0000AF   321 G$EA$0_0$0 == 0x00af
                           0000AF   322 _EA	=	0x00af
                           0000AD   323 G$ET2$0_0$0 == 0x00ad
                           0000AD   324 _ET2	=	0x00ad
                           0000AC   325 G$ES$0_0$0 == 0x00ac
                           0000AC   326 _ES	=	0x00ac
                           0000AB   327 G$ET1$0_0$0 == 0x00ab
                           0000AB   328 _ET1	=	0x00ab
                           0000AA   329 G$EX1$0_0$0 == 0x00aa
                           0000AA   330 _EX1	=	0x00aa
                           0000A9   331 G$ET0$0_0$0 == 0x00a9
                           0000A9   332 _ET0	=	0x00a9
                           0000A8   333 G$EX0$0_0$0 == 0x00a8
                           0000A8   334 _EX0	=	0x00a8
                           0000BD   335 G$PT2$0_0$0 == 0x00bd
                           0000BD   336 _PT2	=	0x00bd
                           0000BC   337 G$PS$0_0$0 == 0x00bc
                           0000BC   338 _PS	=	0x00bc
                           0000BB   339 G$PT1$0_0$0 == 0x00bb
                           0000BB   340 _PT1	=	0x00bb
                           0000BA   341 G$PX1$0_0$0 == 0x00ba
                           0000BA   342 _PX1	=	0x00ba
                           0000B9   343 G$PT0$0_0$0 == 0x00b9
                           0000B9   344 _PT0	=	0x00b9
                           0000B8   345 G$PX0$0_0$0 == 0x00b8
                           0000B8   346 _PX0	=	0x00b8
                           0000B7   347 G$RD$0_0$0 == 0x00b7
                           0000B7   348 _RD	=	0x00b7
                           0000B6   349 G$WR$0_0$0 == 0x00b6
                           0000B6   350 _WR	=	0x00b6
                           0000B5   351 G$T1$0_0$0 == 0x00b5
                           0000B5   352 _T1	=	0x00b5
                           0000B4   353 G$T0$0_0$0 == 0x00b4
                           0000B4   354 _T0	=	0x00b4
                           0000B3   355 G$INT1$0_0$0 == 0x00b3
                           0000B3   356 _INT1	=	0x00b3
                           0000B2   357 G$INT0$0_0$0 == 0x00b2
                           0000B2   358 _INT0	=	0x00b2
                           0000B1   359 G$TXD$0_0$0 == 0x00b1
                           0000B1   360 _TXD	=	0x00b1
                           0000B0   361 G$RXD$0_0$0 == 0x00b0
                           0000B0   362 _RXD	=	0x00b0
                           00009F   363 G$SM0$0_0$0 == 0x009f
                           00009F   364 _SM0	=	0x009f
                           00009E   365 G$SM1$0_0$0 == 0x009e
                           00009E   366 _SM1	=	0x009e
                           00009D   367 G$SM2$0_0$0 == 0x009d
                           00009D   368 _SM2	=	0x009d
                           00009C   369 G$REN$0_0$0 == 0x009c
                           00009C   370 _REN	=	0x009c
                           00009B   371 G$TB8$0_0$0 == 0x009b
                           00009B   372 _TB8	=	0x009b
                           00009A   373 G$RB8$0_0$0 == 0x009a
                           00009A   374 _RB8	=	0x009a
                           000099   375 G$TI$0_0$0 == 0x0099
                           000099   376 _TI	=	0x0099
                           000098   377 G$RI$0_0$0 == 0x0098
                           000098   378 _RI	=	0x0098
                           000091   379 G$T2EX$0_0$0 == 0x0091
                           000091   380 _T2EX	=	0x0091
                           000090   381 G$T2$0_0$0 == 0x0090
                           000090   382 _T2	=	0x0090
                           0000CF   383 G$TF2$0_0$0 == 0x00cf
                           0000CF   384 _TF2	=	0x00cf
                           0000CE   385 G$EXF2$0_0$0 == 0x00ce
                           0000CE   386 _EXF2	=	0x00ce
                           0000CD   387 G$RCLK$0_0$0 == 0x00cd
                           0000CD   388 _RCLK	=	0x00cd
                           0000CC   389 G$TCLK$0_0$0 == 0x00cc
                           0000CC   390 _TCLK	=	0x00cc
                           0000CB   391 G$EXEN2$0_0$0 == 0x00cb
                           0000CB   392 _EXEN2	=	0x00cb
                           0000CA   393 G$TR2$0_0$0 == 0x00ca
                           0000CA   394 _TR2	=	0x00ca
                           0000C9   395 G$C_T2$0_0$0 == 0x00c9
                           0000C9   396 _C_T2	=	0x00c9
                           0000C8   397 G$CP_RL2$0_0$0 == 0x00c8
                           0000C8   398 _CP_RL2	=	0x00c8
                                    399 ;--------------------------------------------------------
                                    400 ; overlayable register banks
                                    401 ;--------------------------------------------------------
                                    402 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        403 	.ds 8
                                    404 ;--------------------------------------------------------
                                    405 ; internal ram data
                                    406 ;--------------------------------------------------------
                                    407 	.area DSEG    (DATA)
                                    408 ;--------------------------------------------------------
                                    409 ; overlayable items in internal ram 
                                    410 ;--------------------------------------------------------
                                    411 	.area	OSEG    (OVR,DATA)
                                    412 	.area	OSEG    (OVR,DATA)
                                    413 ;--------------------------------------------------------
                                    414 ; indirectly addressable internal ram data
                                    415 ;--------------------------------------------------------
                                    416 	.area ISEG    (DATA)
                                    417 ;--------------------------------------------------------
                                    418 ; absolute internal ram data
                                    419 ;--------------------------------------------------------
                                    420 	.area IABS    (ABS,DATA)
                                    421 	.area IABS    (ABS,DATA)
                                    422 ;--------------------------------------------------------
                                    423 ; bit data
                                    424 ;--------------------------------------------------------
                                    425 	.area BSEG    (BIT)
                                    426 ;--------------------------------------------------------
                                    427 ; paged external ram data
                                    428 ;--------------------------------------------------------
                                    429 	.area PSEG    (PAG,XDATA)
                                    430 ;--------------------------------------------------------
                                    431 ; external ram data
                                    432 ;--------------------------------------------------------
                                    433 	.area XSEG    (XDATA)
                                    434 ;--------------------------------------------------------
                                    435 ; absolute external ram data
                                    436 ;--------------------------------------------------------
                                    437 	.area XABS    (ABS,XDATA)
                                    438 ;--------------------------------------------------------
                                    439 ; external initialized ram data
                                    440 ;--------------------------------------------------------
                                    441 	.area XISEG   (XDATA)
                                    442 	.area HOME    (CODE)
                                    443 	.area GSINIT0 (CODE)
                                    444 	.area GSINIT1 (CODE)
                                    445 	.area GSINIT2 (CODE)
                                    446 	.area GSINIT3 (CODE)
                                    447 	.area GSINIT4 (CODE)
                                    448 	.area GSINIT5 (CODE)
                                    449 	.area GSINIT  (CODE)
                                    450 	.area GSFINAL (CODE)
                                    451 	.area CSEG    (CODE)
                                    452 ;--------------------------------------------------------
                                    453 ; global & static initialisations
                                    454 ;--------------------------------------------------------
                                    455 	.area HOME    (CODE)
                                    456 	.area GSINIT  (CODE)
                                    457 	.area GSFINAL (CODE)
                                    458 	.area GSINIT  (CODE)
                                    459 ;--------------------------------------------------------
                                    460 ; Home
                                    461 ;--------------------------------------------------------
                                    462 	.area HOME    (CODE)
                                    463 	.area HOME    (CODE)
                                    464 ;--------------------------------------------------------
                                    465 ; code
                                    466 ;--------------------------------------------------------
                                    467 	.area CSEG    (CODE)
                                    468 ;------------------------------------------------------------
                                    469 ;Allocation info for local variables in function 'SerialBegin'
                                    470 ;------------------------------------------------------------
                                    471 ;b                         Allocated to registers r6 r7 
                                    472 ;------------------------------------------------------------
                           000000   473 	G$SerialBegin$0$0 ==.
                           000000   474 	C$ttl.c$6$0_0$2 ==.
                                    475 ;	./src/modules/ttl.c:6: void SerialBegin(uint16_t b) {
                                    476 ;	-----------------------------------------
                                    477 ;	 function SerialBegin
                                    478 ;	-----------------------------------------
      000000                        479 _SerialBegin:
                           000007   480 	ar7 = 0x07
                           000006   481 	ar6 = 0x06
                           000005   482 	ar5 = 0x05
                           000004   483 	ar4 = 0x04
                           000003   484 	ar3 = 0x03
                           000002   485 	ar2 = 0x02
                           000001   486 	ar1 = 0x01
                           000000   487 	ar0 = 0x00
      000000 AE 82            [24]  488 	mov	r6,dpl
      000002 AF 83            [24]  489 	mov	r7,dph
                           000004   490 	C$ttl.c$8$1_0$2 ==.
                                    491 ;	./src/modules/ttl.c:8: PCON = 0x80;
      000004 75 87 80         [24]  492 	mov	_PCON,#0x80
                           000007   493 	C$ttl.c$10$1_0$2 ==.
                                    494 ;	./src/modules/ttl.c:10: SCON = 0x50;
      000007 75 98 50         [24]  495 	mov	_SCON,#0x50
                           00000A   496 	C$ttl.c$12$1_0$2 ==.
                                    497 ;	./src/modules/ttl.c:12: TMOD = 0x20;
      00000A 75 89 20         [24]  498 	mov	_TMOD,#0x20
                           00000D   499 	C$ttl.c$14$1_0$2 ==.
                                    500 ;	./src/modules/ttl.c:14: TH1 = TL1 = -(CRYSTAL / 12 / 32 / (b / 2));
      00000D EF               [12]  501 	mov	a,r7
      00000E C3               [12]  502 	clr	c
      00000F 13               [12]  503 	rrc	a
      000010 CE               [12]  504 	xch	a,r6
      000011 13               [12]  505 	rrc	a
      000012 CE               [12]  506 	xch	a,r6
      000013 FF               [12]  507 	mov	r7,a
      000014 8E*00            [24]  508 	mov	__divslong_PARM_2,r6
      000016 8F*01            [24]  509 	mov	(__divslong_PARM_2 + 1),r7
      000018 75*02 00         [24]  510 	mov	(__divslong_PARM_2 + 2),#0x00
      00001B 75*03 00         [24]  511 	mov	(__divslong_PARM_2 + 3),#0x00
      00001E 90 70 80         [24]  512 	mov	dptr,#0x7080
      000021 E4               [12]  513 	clr	a
      000022 F5 F0            [12]  514 	mov	b,a
      000024 12r00r00         [24]  515 	lcall	__divslong
      000027 AC 82            [24]  516 	mov	r4,dpl
      000029 C3               [12]  517 	clr	c
      00002A E4               [12]  518 	clr	a
      00002B 9C               [12]  519 	subb	a,r4
      00002C FC               [12]  520 	mov	r4,a
      00002D 8C 8B            [24]  521 	mov	_TL1,r4
      00002F 8C 8D            [24]  522 	mov	_TH1,r4
                           000031   523 	C$ttl.c$16$1_0$2 ==.
                                    524 ;	./src/modules/ttl.c:16: TR1 = EA = ES = 1;
                                    525 ;	assignBit
      000031 D2 AC            [12]  526 	setb	_ES
                                    527 ;	assignBit
      000033 A2 AC            [12]  528 	mov	c,_ES
      000035 92 AF            [24]  529 	mov	_EA,c
                                    530 ;	assignBit
      000037 A2 AF            [12]  531 	mov	c,_EA
      000039 92 8E            [24]  532 	mov	_TR1,c
                           00003B   533 	C$ttl.c$17$1_0$2 ==.
                                    534 ;	./src/modules/ttl.c:17: }
                           00003B   535 	C$ttl.c$17$1_0$2 ==.
                           00003B   536 	XG$SerialBegin$0$0 ==.
      00003B 22               [24]  537 	ret
                                    538 ;------------------------------------------------------------
                                    539 ;Allocation info for local variables in function 'SerialEnd'
                                    540 ;------------------------------------------------------------
                           00003C   541 	G$SerialEnd$0$0 ==.
                           00003C   542 	C$ttl.c$20$1_0$3 ==.
                                    543 ;	./src/modules/ttl.c:20: void SerialEnd() {
                                    544 ;	-----------------------------------------
                                    545 ;	 function SerialEnd
                                    546 ;	-----------------------------------------
      00003C                        547 _SerialEnd:
                           00003C   548 	C$ttl.c$22$1_0$3 ==.
                                    549 ;	./src/modules/ttl.c:22: EA = ES = 0;
                                    550 ;	assignBit
      00003C C2 AC            [12]  551 	clr	_ES
                                    552 ;	assignBit
      00003E A2 AC            [12]  553 	mov	c,_ES
      000040 92 AF            [24]  554 	mov	_EA,c
                           000042   555 	C$ttl.c$23$1_0$3 ==.
                                    556 ;	./src/modules/ttl.c:23: }
                           000042   557 	C$ttl.c$23$1_0$3 ==.
                           000042   558 	XG$SerialEnd$0$0 ==.
      000042 22               [24]  559 	ret
                                    560 ;------------------------------------------------------------
                                    561 ;Allocation info for local variables in function 'SerialSetTimeout'
                                    562 ;------------------------------------------------------------
                                    563 ;t                         Allocated to registers r6 r7 
                                    564 ;------------------------------------------------------------
                           000043   565 	G$SerialSetTimeout$0$0 ==.
                           000043   566 	C$ttl.c$26$1_0$5 ==.
                                    567 ;	./src/modules/ttl.c:26: void SerialSetTimeout(uint16_t t) {
                                    568 ;	-----------------------------------------
                                    569 ;	 function SerialSetTimeout
                                    570 ;	-----------------------------------------
      000043                        571 _SerialSetTimeout:
      000043 AE 82            [24]  572 	mov	r6,dpl
      000045 AF 83            [24]  573 	mov	r7,dph
                           000047   574 	C$ttl.c$28$1_0$5 ==.
                                    575 ;	./src/modules/ttl.c:28: TMOD = 0x01;
      000047 75 89 01         [24]  576 	mov	_TMOD,#0x01
                           00004A   577 	C$ttl.c$30$1_0$5 ==.
                                    578 ;	./src/modules/ttl.c:30: TH0 = (t >> 8) & 0xff;
      00004A 8F 8C            [24]  579 	mov	_TH0,r7
                           00004C   580 	C$ttl.c$31$1_0$5 ==.
                                    581 ;	./src/modules/ttl.c:31: TL0 = t & 0xff;
      00004C 8E 8A            [24]  582 	mov	_TL0,r6
                           00004E   583 	C$ttl.c$33$1_0$5 ==.
                                    584 ;	./src/modules/ttl.c:33: TR0 = EA = ET0 = 1;
                                    585 ;	assignBit
      00004E D2 A9            [12]  586 	setb	_ET0
                                    587 ;	assignBit
      000050 A2 A9            [12]  588 	mov	c,_ET0
      000052 92 AF            [24]  589 	mov	_EA,c
                                    590 ;	assignBit
      000054 A2 AF            [12]  591 	mov	c,_EA
      000056 92 8C            [24]  592 	mov	_TR0,c
                           000058   593 	C$ttl.c$34$1_0$5 ==.
                                    594 ;	./src/modules/ttl.c:34: }
                           000058   595 	C$ttl.c$34$1_0$5 ==.
                           000058   596 	XG$SerialSetTimeout$0$0 ==.
      000058 22               [24]  597 	ret
                                    598 ;------------------------------------------------------------
                                    599 ;Allocation info for local variables in function 'SerialFlush'
                                    600 ;------------------------------------------------------------
                           000059   601 	G$SerialFlush$0$0 ==.
                           000059   602 	C$ttl.c$37$1_0$6 ==.
                                    603 ;	./src/modules/ttl.c:37: void SerialFlush() {
                                    604 ;	-----------------------------------------
                                    605 ;	 function SerialFlush
                                    606 ;	-----------------------------------------
      000059                        607 _SerialFlush:
                           000059   608 	C$ttl.c$39$1_0$6 ==.
                                    609 ;	./src/modules/ttl.c:39: while (!TI) {
      000059                        610 00101$:
                           000059   611 	C$ttl.c$43$1_0$6 ==.
                                    612 ;	./src/modules/ttl.c:43: TI = 0;
                                    613 ;	assignBit
      000059 10 99 02         [24]  614 	jbc	_TI,00114$
      00005C 80 FB            [24]  615 	sjmp	00101$
      00005E                        616 00114$:
                           00005E   617 	C$ttl.c$44$1_0$6 ==.
                                    618 ;	./src/modules/ttl.c:44: }
                           00005E   619 	C$ttl.c$44$1_0$6 ==.
                           00005E   620 	XG$SerialFlush$0$0 ==.
      00005E 22               [24]  621 	ret
                                    622 ;------------------------------------------------------------
                                    623 ;Allocation info for local variables in function 'SerialWrite'
                                    624 ;------------------------------------------------------------
                                    625 ;c                         Allocated to registers r7 
                                    626 ;------------------------------------------------------------
                           00005F   627 	G$SerialWrite$0$0 ==.
                           00005F   628 	C$ttl.c$47$1_0$9 ==.
                                    629 ;	./src/modules/ttl.c:47: void SerialWrite(uint8_t c) {
                                    630 ;	-----------------------------------------
                                    631 ;	 function SerialWrite
                                    632 ;	-----------------------------------------
      00005F                        633 _SerialWrite:
      00005F AF 82            [24]  634 	mov	r7,dpl
                           000061   635 	C$ttl.c$49$1_0$9 ==.
                                    636 ;	./src/modules/ttl.c:49: ES = 0;
                                    637 ;	assignBit
      000061 C2 AC            [12]  638 	clr	_ES
                           000063   639 	C$ttl.c$51$1_0$9 ==.
                                    640 ;	./src/modules/ttl.c:51: SBUF = c;
      000063 8F 99            [24]  641 	mov	_SBUF,r7
                           000065   642 	C$ttl.c$53$1_0$9 ==.
                                    643 ;	./src/modules/ttl.c:53: while (!TI) {
      000065                        644 00101$:
                           000065   645 	C$ttl.c$57$1_0$9 ==.
                                    646 ;	./src/modules/ttl.c:57: TI = 0;
                                    647 ;	assignBit
      000065 10 99 02         [24]  648 	jbc	_TI,00114$
      000068 80 FB            [24]  649 	sjmp	00101$
      00006A                        650 00114$:
                           00006A   651 	C$ttl.c$59$1_0$9 ==.
                                    652 ;	./src/modules/ttl.c:59: ES = !TI;
      00006A A2 99            [12]  653 	mov	c,_TI
      00006C B3               [12]  654 	cpl	c
      00006D 92 AC            [24]  655 	mov	_ES,c
                           00006F   656 	C$ttl.c$60$1_0$9 ==.
                                    657 ;	./src/modules/ttl.c:60: }
                           00006F   658 	C$ttl.c$60$1_0$9 ==.
                           00006F   659 	XG$SerialWrite$0$0 ==.
      00006F 22               [24]  660 	ret
                                    661 ;------------------------------------------------------------
                                    662 ;Allocation info for local variables in function 'SerialPrint'
                                    663 ;------------------------------------------------------------
                                    664 ;s                         Allocated to registers 
                                    665 ;------------------------------------------------------------
                           000070   666 	G$SerialPrint$0$0 ==.
                           000070   667 	C$ttl.c$63$1_0$12 ==.
                                    668 ;	./src/modules/ttl.c:63: void SerialPrint(char* s) {
                                    669 ;	-----------------------------------------
                                    670 ;	 function SerialPrint
                                    671 ;	-----------------------------------------
      000070                        672 _SerialPrint:
      000070 AD 82            [24]  673 	mov	r5,dpl
      000072 AE 83            [24]  674 	mov	r6,dph
      000074 AF F0            [24]  675 	mov	r7,b
                           000076   676 	C$ttl.c$65$1_0$12 ==.
                                    677 ;	./src/modules/ttl.c:65: while (*s) {
      000076                        678 00101$:
      000076 8D 82            [24]  679 	mov	dpl,r5
      000078 8E 83            [24]  680 	mov	dph,r6
      00007A 8F F0            [24]  681 	mov	b,r7
      00007C 12r00r00         [24]  682 	lcall	__gptrget
      00007F FC               [12]  683 	mov	r4,a
      000080 60 18            [24]  684 	jz	00104$
                           000082   685 	C$ttl.c$66$2_0$13 ==.
                                    686 ;	./src/modules/ttl.c:66: SerialWrite(*s++);
      000082 8C 82            [24]  687 	mov	dpl,r4
      000084 0D               [12]  688 	inc	r5
      000085 BD 00 01         [24]  689 	cjne	r5,#0x00,00116$
      000088 0E               [12]  690 	inc	r6
      000089                        691 00116$:
      000089 C0 07            [24]  692 	push	ar7
      00008B C0 06            [24]  693 	push	ar6
      00008D C0 05            [24]  694 	push	ar5
      00008F 12r00r5F         [24]  695 	lcall	_SerialWrite
      000092 D0 05            [24]  696 	pop	ar5
      000094 D0 06            [24]  697 	pop	ar6
      000096 D0 07            [24]  698 	pop	ar7
      000098 80 DC            [24]  699 	sjmp	00101$
      00009A                        700 00104$:
                           00009A   701 	C$ttl.c$68$1_0$12 ==.
                                    702 ;	./src/modules/ttl.c:68: }
                           00009A   703 	C$ttl.c$68$1_0$12 ==.
                           00009A   704 	XG$SerialPrint$0$0 ==.
      00009A 22               [24]  705 	ret
                                    706 ;------------------------------------------------------------
                                    707 ;Allocation info for local variables in function 'SerialPrintln'
                                    708 ;------------------------------------------------------------
                                    709 ;s                         Allocated to registers r5 r6 r7 
                                    710 ;------------------------------------------------------------
                           00009B   711 	G$SerialPrintln$0$0 ==.
                           00009B   712 	C$ttl.c$71$1_0$15 ==.
                                    713 ;	./src/modules/ttl.c:71: void SerialPrintln(char* s) {
                                    714 ;	-----------------------------------------
                                    715 ;	 function SerialPrintln
                                    716 ;	-----------------------------------------
      00009B                        717 _SerialPrintln:
                           00009B   718 	C$ttl.c$73$1_0$15 ==.
                                    719 ;	./src/modules/ttl.c:73: SerialPrint(s);
      00009B 12r00r70         [24]  720 	lcall	_SerialPrint
                           00009E   721 	C$ttl.c$74$1_0$15 ==.
                                    722 ;	./src/modules/ttl.c:74: SerialPrint("\r\n");
      00009E 90r00r40         [24]  723 	mov	dptr,#___str_0
      0000A1 75 F0 80         [24]  724 	mov	b,#0x80
      0000A4 12r00r70         [24]  725 	lcall	_SerialPrint
                           0000A7   726 	C$ttl.c$75$1_0$15 ==.
                                    727 ;	./src/modules/ttl.c:75: }
                           0000A7   728 	C$ttl.c$75$1_0$15 ==.
                           0000A7   729 	XG$SerialPrintln$0$0 ==.
      0000A7 22               [24]  730 	ret
                                    731 ;------------------------------------------------------------
                                    732 ;Allocation info for local variables in function 'SerialRead'
                                    733 ;------------------------------------------------------------
                           0000A8   734 	G$SerialRead$0$0 ==.
                           0000A8   735 	C$ttl.c$78$1_0$16 ==.
                                    736 ;	./src/modules/ttl.c:78: char SerialRead() {
                                    737 ;	-----------------------------------------
                                    738 ;	 function SerialRead
                                    739 ;	-----------------------------------------
      0000A8                        740 _SerialRead:
                           0000A8   741 	C$ttl.c$80$1_0$16 ==.
                                    742 ;	./src/modules/ttl.c:80: while (!RI) {
      0000A8                        743 00101$:
                           0000A8   744 	C$ttl.c$84$1_0$16 ==.
                                    745 ;	./src/modules/ttl.c:84: RI = 0;
                                    746 ;	assignBit
      0000A8 10 98 02         [24]  747 	jbc	_RI,00114$
      0000AB 80 FB            [24]  748 	sjmp	00101$
      0000AD                        749 00114$:
                           0000AD   750 	C$ttl.c$86$1_0$16 ==.
                                    751 ;	./src/modules/ttl.c:86: return SBUF;
      0000AD 85 99 82         [24]  752 	mov	dpl,_SBUF
                           0000B0   753 	C$ttl.c$87$1_0$16 ==.
                                    754 ;	./src/modules/ttl.c:87: }
                           0000B0   755 	C$ttl.c$87$1_0$16 ==.
                           0000B0   756 	XG$SerialRead$0$0 ==.
      0000B0 22               [24]  757 	ret
                                    758 ;------------------------------------------------------------
                                    759 ;Allocation info for local variables in function 'SerialAvailable'
                                    760 ;------------------------------------------------------------
                           0000B1   761 	G$SerialAvailable$0$0 ==.
                           0000B1   762 	C$ttl.c$90$1_0$18 ==.
                                    763 ;	./src/modules/ttl.c:90: uint8_t SerialAvailable() {
                                    764 ;	-----------------------------------------
                                    765 ;	 function SerialAvailable
                                    766 ;	-----------------------------------------
      0000B1                        767 _SerialAvailable:
                           0000B1   768 	C$ttl.c$92$1_0$18 ==.
                                    769 ;	./src/modules/ttl.c:92: return RI;
      0000B1 A2 98            [12]  770 	mov	c,_RI
      0000B3 E4               [12]  771 	clr	a
      0000B4 33               [12]  772 	rlc	a
      0000B5 F5 82            [12]  773 	mov	dpl,a
                           0000B7   774 	C$ttl.c$93$1_0$18 ==.
                                    775 ;	./src/modules/ttl.c:93: }
                           0000B7   776 	C$ttl.c$93$1_0$18 ==.
                           0000B7   777 	XG$SerialAvailable$0$0 ==.
      0000B7 22               [24]  778 	ret
                                    779 ;------------------------------------------------------------
                                    780 ;Allocation info for local variables in function 'putchar'
                                    781 ;------------------------------------------------------------
                                    782 ;c                         Allocated to registers r7 
                                    783 ;------------------------------------------------------------
                           0000B8   784 	G$putchar$0$0 ==.
                           0000B8   785 	C$ttl.c$96$1_0$20 ==.
                                    786 ;	./src/modules/ttl.c:96: uint8_t putchar(uint8_t c) {
                                    787 ;	-----------------------------------------
                                    788 ;	 function putchar
                                    789 ;	-----------------------------------------
      0000B8                        790 _putchar:
                           0000B8   791 	C$ttl.c$98$1_0$20 ==.
                                    792 ;	./src/modules/ttl.c:98: SerialWrite(c);
      0000B8 AF 82            [24]  793 	mov  r7,dpl
      0000BA C0 07            [24]  794 	push	ar7
      0000BC 12r00r5F         [24]  795 	lcall	_SerialWrite
      0000BF D0 07            [24]  796 	pop	ar7
                           0000C1   797 	C$ttl.c$99$1_0$20 ==.
                                    798 ;	./src/modules/ttl.c:99: return c;
      0000C1 8F 82            [24]  799 	mov	dpl,r7
                           0000C3   800 	C$ttl.c$100$1_0$20 ==.
                                    801 ;	./src/modules/ttl.c:100: }
                           0000C3   802 	C$ttl.c$100$1_0$20 ==.
                           0000C3   803 	XG$putchar$0$0 ==.
      0000C3 22               [24]  804 	ret
                                    805 	.area CSEG    (CODE)
                                    806 	.area CONST   (CODE)
                           000000   807 G$PIN_P00$0_0$0 == .
      000000                        808 _PIN_P00:
      000000 00                     809 	.db #0x00	; 0
      000001 00                     810 	.db #0x00	; 0
                           000002   811 G$PIN_P01$0_0$0 == .
      000002                        812 _PIN_P01:
      000002 00                     813 	.db #0x00	; 0
      000003 01                     814 	.db #0x01	; 1
                           000004   815 G$PIN_P02$0_0$0 == .
      000004                        816 _PIN_P02:
      000004 00                     817 	.db #0x00	; 0
      000005 02                     818 	.db #0x02	; 2
                           000006   819 G$PIN_P03$0_0$0 == .
      000006                        820 _PIN_P03:
      000006 00                     821 	.db #0x00	; 0
      000007 03                     822 	.db #0x03	; 3
                           000008   823 G$PIN_P04$0_0$0 == .
      000008                        824 _PIN_P04:
      000008 00                     825 	.db #0x00	; 0
      000009 04                     826 	.db #0x04	; 4
                           00000A   827 G$PIN_P05$0_0$0 == .
      00000A                        828 _PIN_P05:
      00000A 00                     829 	.db #0x00	; 0
      00000B 05                     830 	.db #0x05	; 5
                           00000C   831 G$PIN_P06$0_0$0 == .
      00000C                        832 _PIN_P06:
      00000C 00                     833 	.db #0x00	; 0
      00000D 06                     834 	.db #0x06	; 6
                           00000E   835 G$PIN_P07$0_0$0 == .
      00000E                        836 _PIN_P07:
      00000E 00                     837 	.db #0x00	; 0
      00000F 07                     838 	.db #0x07	; 7
                           000010   839 G$PIN_P10$0_0$0 == .
      000010                        840 _PIN_P10:
      000010 01                     841 	.db #0x01	; 1
      000011 00                     842 	.db #0x00	; 0
                           000012   843 G$PIN_P11$0_0$0 == .
      000012                        844 _PIN_P11:
      000012 01                     845 	.db #0x01	; 1
      000013 01                     846 	.db #0x01	; 1
                           000014   847 G$PIN_P12$0_0$0 == .
      000014                        848 _PIN_P12:
      000014 01                     849 	.db #0x01	; 1
      000015 02                     850 	.db #0x02	; 2
                           000016   851 G$PIN_P13$0_0$0 == .
      000016                        852 _PIN_P13:
      000016 01                     853 	.db #0x01	; 1
      000017 03                     854 	.db #0x03	; 3
                           000018   855 G$PIN_P14$0_0$0 == .
      000018                        856 _PIN_P14:
      000018 01                     857 	.db #0x01	; 1
      000019 04                     858 	.db #0x04	; 4
                           00001A   859 G$PIN_P15$0_0$0 == .
      00001A                        860 _PIN_P15:
      00001A 01                     861 	.db #0x01	; 1
      00001B 05                     862 	.db #0x05	; 5
                           00001C   863 G$PIN_P16$0_0$0 == .
      00001C                        864 _PIN_P16:
      00001C 01                     865 	.db #0x01	; 1
      00001D 06                     866 	.db #0x06	; 6
                           00001E   867 G$PIN_P17$0_0$0 == .
      00001E                        868 _PIN_P17:
      00001E 01                     869 	.db #0x01	; 1
      00001F 07                     870 	.db #0x07	; 7
                           000020   871 G$PIN_P20$0_0$0 == .
      000020                        872 _PIN_P20:
      000020 02                     873 	.db #0x02	; 2
      000021 00                     874 	.db #0x00	; 0
                           000022   875 G$PIN_P21$0_0$0 == .
      000022                        876 _PIN_P21:
      000022 02                     877 	.db #0x02	; 2
      000023 01                     878 	.db #0x01	; 1
                           000024   879 G$PIN_P22$0_0$0 == .
      000024                        880 _PIN_P22:
      000024 02                     881 	.db #0x02	; 2
      000025 02                     882 	.db #0x02	; 2
                           000026   883 G$PIN_P23$0_0$0 == .
      000026                        884 _PIN_P23:
      000026 02                     885 	.db #0x02	; 2
      000027 03                     886 	.db #0x03	; 3
                           000028   887 G$PIN_P24$0_0$0 == .
      000028                        888 _PIN_P24:
      000028 02                     889 	.db #0x02	; 2
      000029 04                     890 	.db #0x04	; 4
                           00002A   891 G$PIN_P25$0_0$0 == .
      00002A                        892 _PIN_P25:
      00002A 02                     893 	.db #0x02	; 2
      00002B 05                     894 	.db #0x05	; 5
                           00002C   895 G$PIN_P26$0_0$0 == .
      00002C                        896 _PIN_P26:
      00002C 02                     897 	.db #0x02	; 2
      00002D 06                     898 	.db #0x06	; 6
                           00002E   899 G$PIN_P27$0_0$0 == .
      00002E                        900 _PIN_P27:
      00002E 02                     901 	.db #0x02	; 2
      00002F 07                     902 	.db #0x07	; 7
                           000030   903 G$PIN_P30$0_0$0 == .
      000030                        904 _PIN_P30:
      000030 03                     905 	.db #0x03	; 3
      000031 00                     906 	.db #0x00	; 0
                           000032   907 G$PIN_P31$0_0$0 == .
      000032                        908 _PIN_P31:
      000032 03                     909 	.db #0x03	; 3
      000033 01                     910 	.db #0x01	; 1
                           000034   911 G$PIN_P32$0_0$0 == .
      000034                        912 _PIN_P32:
      000034 03                     913 	.db #0x03	; 3
      000035 02                     914 	.db #0x02	; 2
                           000036   915 G$PIN_P33$0_0$0 == .
      000036                        916 _PIN_P33:
      000036 03                     917 	.db #0x03	; 3
      000037 03                     918 	.db #0x03	; 3
                           000038   919 G$PIN_P34$0_0$0 == .
      000038                        920 _PIN_P34:
      000038 03                     921 	.db #0x03	; 3
      000039 04                     922 	.db #0x04	; 4
                           00003A   923 G$PIN_P35$0_0$0 == .
      00003A                        924 _PIN_P35:
      00003A 03                     925 	.db #0x03	; 3
      00003B 05                     926 	.db #0x05	; 5
                           00003C   927 G$PIN_P36$0_0$0 == .
      00003C                        928 _PIN_P36:
      00003C 03                     929 	.db #0x03	; 3
      00003D 06                     930 	.db #0x06	; 6
                           00003E   931 G$PIN_P37$0_0$0 == .
      00003E                        932 _PIN_P37:
      00003E 03                     933 	.db #0x03	; 3
      00003F 07                     934 	.db #0x07	; 7
                           000040   935 Fttl$__str_0$0_0$0 == .
                                    936 	.area CONST   (CODE)
      000040                        937 ___str_0:
      000040 0D                     938 	.db 0x0d
      000041 0A                     939 	.db 0x0a
      000042 00                     940 	.db 0x00
                                    941 	.area CSEG    (CODE)
                                    942 	.area XINIT   (CODE)
                                    943 	.area CABS    (ABS,CODE)
